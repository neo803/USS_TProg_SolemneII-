import streamlit as st
import requests
import json
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, timedelta
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="Proyecto Final - DataViz Python Lab: Construyendo Interfaces de Datos Interactivas - An√°lisis de Datos P√∫blicos",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Estilos CSS personalizados
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-container {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
    }
    .stSelectbox > div > div {
        background-color: white;
    }
</style>
""", unsafe_allow_html=True)

# T√≠tulo principal
st.markdown('<h1 class="main-header">üìä Proyecto Final - DataViz Python Lab: Construyendo Interfaces de Datos Interactivas - An√°lisis de Datos P√∫blicos</h1>', unsafe_allow_html=True)

# Funciones para obtener datos de APIs
@st.cache_data(ttl=3600)  # Cache por 1 hora
def obtener_indicadores_economicos(indicador, a√±o='2025'):
    """Obtiene indicadores econ√≥micos desde mindicador.cl"""
    try:
        url = f'https://mindicador.cl/api/{indicador}/{a√±o}'
        response = requests.get(url, timeout=10)
        response.raise_for_status()
        data = response.json()
        
        if "serie" in data and data["serie"]:
            df = pd.DataFrame(data["serie"])
            df["fecha"] = pd.to_datetime(df["fecha"])
            df = df.sort_values("fecha")
            # Asegurar que los valores sean num√©ricos
            df["valor"] = pd.to_numeric(df["valor"], errors='coerce')
            df = df.dropna(subset=['valor'])  # Eliminar filas con valores NaN
            return df, data.get("nombre", indicador)
        else:
            return None, None
    except Exception as e:
        st.error(f"Error al obtener datos de {indicador}: {str(e)}")
        return None, None

@st.cache_data(ttl=3600)
def obtener_sismos():
    """Obtiene datos de sismos desde la API de Gael Cloud"""
    try:
        url = 'https://api.gael.cloud/general/public/sismos'
        response = requests.get(url, timeout=15)
        response.raise_for_status()
        data = response.json()
        
        if data and isinstance(data, list):
            df = pd.DataFrame(data)
            
            # Procesar fechas si existen
            if 'Fecha' in df.columns:
                df['Fecha'] = pd.to_datetime(df['Fecha'], errors='coerce')
            
            # Limpiar datos num√©ricos si existen
            columnas_numericas = ['Magnitud', 'Profundidad', 'Latitud', 'Longitud']
            for col in columnas_numericas:
                if col in df.columns:
                    df[col] = pd.to_numeric(df[col], errors='coerce')
            
            # Eliminar filas completamente vac√≠as
            df = df.dropna(how='all')
            
            return df
        else:
            return pd.DataFrame()
            
    except Exception as e:
        st.error(f"Error al obtener datos de sismos: {str(e)}")
        return pd.DataFrame()

# Funci√≥n auxiliar para verificar si una columna existe y tiene datos
def verificar_columna(df, columna):
    """Verifica si una columna existe y tiene datos v√°lidos"""
    return columna in df.columns and not df[columna].isna().all()

# Sidebar para navegaci√≥n
st.sidebar.title("üîß Panel de Control")
seccion = st.sidebar.selectbox(
    "Selecciona una secci√≥n:",
    ["üè† Inicio", "üí∞ Indicadores Econ√≥micos", "üåç Sismos en Chile", "üìà An√°lisis Comparativo", "üìä Dashboard Interactivo"]
)

if seccion == "üè† Inicio":
    st.markdown("## Sistema de An√°lisis de Datos P√∫blicos de Chile")
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        ### üéØ Objetivos del Proyecto
        - **Integraci√≥n con APIs REST**: Conexi√≥n con fuentes de datos p√∫blicas
        - **An√°lisis de Datos**: Procesamiento y an√°lisis estad√≠stico
        - **Visualizaci√≥n Interactiva**: Gr√°ficos din√°micos y dashboards
        - **Aplicaci√≥n Web**: Interface intuitiva con Streamlit
        """)
        
        st.markdown("""
        ### üìä Fuentes de Datos
        - **MinIndicador.cl**: Indicadores econ√≥micos de Chile
        - **Gael Cloud**: Datos s√≠smicos actualizados
        - **Datos.gob.cl**: Portal oficial del gobierno
        """)
    
    with col2:
        st.markdown("### üîç Datos Disponibles")
        
        # Mostrar m√©tricas r√°pidas
        try:
            # Obtener UF del d√≠a
            df_uf, _ = obtener_indicadores_economicos('uf')
            if df_uf is not None and not df_uf.empty:
                uf_actual = df_uf['valor'].iloc[-1]
                st.metric("UF Actual", f"${uf_actual:,.0f}")
            
            # Obtener d√≥lar del d√≠a
            df_dolar, _ = obtener_indicadores_economicos('dolar')
            if df_dolar is not None and not df_dolar.empty:
                dolar_actual = df_dolar['valor'].iloc[-1]
                st.metric("D√≥lar Actual", f"${dolar_actual:,.0f}")
            
            # Datos de sismos
            df_sismos = obtener_sismos()
            if not df_sismos.empty:
                st.metric("Sismos Registrados", len(df_sismos))
                
        except Exception as e:
            st.info("Cargando m√©tricas...")

elif seccion == "üí∞ Indicadores Econ√≥micos":
    st.markdown("## üí∞ Indicadores Econ√≥micos de Chile")
    
    # Selector de indicador
    indicadores = {
        'uf': 'Unidad de Fomento (UF)',
        'dolar': 'D√≥lar Observado',
        'euro': 'Euro',
        'ipc': '√çndice de Precios al Consumidor',
        'utm': 'Unidad Tributaria Mensual',
        'tpm': 'Tasa de Pol√≠tica Monetaria',
        'bitcoin': 'Bitcoin'
    }
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        indicador_seleccionado = st.selectbox(
            "Selecciona un indicador:",
            list(indicadores.keys()),
            format_func=lambda x: indicadores[x]
        )
    
    with col2:
        a√±o = st.selectbox("A√±o:", ["2025", "2024", "2023", "2022"])
    
    with col3:
        tipo_grafico = st.selectbox("Tipo de gr√°fico:", ["L√≠nea", "Area", "Barras"])
    
    if st.button("üìä Analizar Indicador", type="primary"):
        with st.spinner(f"Obteniendo datos de {indicadores[indicador_seleccionado]}..."):
            df, nombre_indicador = obtener_indicadores_economicos(indicador_seleccionado, a√±o)
            
            if df is not None and not df.empty:
                st.success(f"‚úÖ Datos obtenidos exitosamente: {len(df)} registros")
                
                # M√©tricas principales
                col1, col2, col3, col4 = st.columns(4)
                
                with col1:
                    st.metric("Valor Actual", f"${df['valor'].iloc[-1]:,.2f}")
                
                with col2:
                    promedio = df['valor'].mean()
                    st.metric("Promedio", f"${promedio:,.2f}")
                
                with col3:
                    maximo = df['valor'].max()
                    st.metric("M√°ximo", f"${maximo:,.2f}")
                
                with col4:
                    minimo = df['valor'].min()
                    st.metric("M√≠nimo", f"${minimo:,.2f}")
                
                # Gr√°fico principal
                st.markdown("### üìà Evoluci√≥n Temporal")
                
                if tipo_grafico == "L√≠nea":
                    fig = px.line(df, x='fecha', y='valor', 
                                title=f'Evoluci√≥n de {nombre_indicador or indicadores[indicador_seleccionado]} - {a√±o}')
                elif tipo_grafico == "Area":
                    fig = px.area(df, x='fecha', y='valor',
                                title=f'Evoluci√≥n de {nombre_indicador or indicadores[indicador_seleccionado]} - {a√±o}')
                else:
                    df_barras = df.tail(30) if len(df) > 30 else df
                    fig = px.bar(df_barras, x='fecha', y='valor',
                               title=f'√öltimos registros - {nombre_indicador or indicadores[indicador_seleccionado]}')
                
                fig.update_layout(height=500)
                st.plotly_chart(fig, use_container_width=True)
                
                # An√°lisis estad√≠stico
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("### üìä Estad√≠sticas Descriptivas")
                    stats = df['valor'].describe()
                    st.dataframe(stats)
                
                with col2:
                    st.markdown("### üìà An√°lisis de Tendencia")
                    # Calcular variaci√≥n porcentual
                    if len(df) > 1:
                        variacion = ((df['valor'].iloc[-1] - df['valor'].iloc[0]) / df['valor'].iloc[0]) * 100
                        st.metric("Variaci√≥n del per√≠odo", f"{variacion:.2f}%")
                        
                        # Volatilidad
                        volatilidad = df['valor'].std()
                        st.metric("Desviaci√≥n Est√°ndar", f"${volatilidad:.2f}")
                
                # Tabla de datos
                with st.expander("üîç Ver datos detallados"):
                    st.dataframe(df.tail(20))
            
            else:
                st.error("‚ùå No se pudieron obtener datos para el indicador seleccionado")

elif seccion == "üåç Sismos en Chile":
    st.markdown("## üåç Monitoreo S√≠smico de Chile")
    
    with st.spinner("Obteniendo datos s√≠smicos..."):
        df_sismos = obtener_sismos()
        
        if not df_sismos.empty:
            st.success(f"‚úÖ {len(df_sismos)} sismos registrados")
            
            # Inicializar df_filtrado
            df_filtrado = df_sismos.copy()
            
            # Filtros solo si las columnas existen
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if verificar_columna(df_sismos, 'Magnitud'):
                    mag_min = st.slider("Magnitud m√≠nima:", 
                                      float(df_sismos['Magnitud'].min()), 
                                      float(df_sismos['Magnitud'].max()), 
                                      float(df_sismos['Magnitud'].min()))
                    df_filtrado = df_filtrado[df_filtrado['Magnitud'] >= mag_min]
                else:
                    st.info("Datos de magnitud no disponibles")
            
            with col2:
                if verificar_columna(df_sismos, 'Profundidad'):
                    prof_max = st.slider("Profundidad m√°xima (km):", 
                                       0, 
                                       int(df_sismos['Profundidad'].max()), 
                                       int(df_sismos['Profundidad'].max()))
                    df_filtrado = df_filtrado[df_filtrado['Profundidad'] <= prof_max]
                else:
                    st.info("Datos de profundidad no disponibles")
            
            with col3:
                mostrar_ultimos = st.number_input("Mostrar √∫ltimos N sismos:", 
                                                1, len(df_filtrado), 
                                                min(50, len(df_filtrado)))
                df_filtrado = df_filtrado.tail(mostrar_ultimos)
            
            # M√©tricas
            col1, col2, col3, col4 = st.columns(4)
            
            with col1:
                st.metric("Sismos filtrados", len(df_filtrado))
            
            if verificar_columna(df_filtrado, 'Magnitud'):
                with col2:
                    st.metric("Magnitud promedio", f"{df_filtrado['Magnitud'].mean():.1f}")
                with col3:
                    st.metric("Magnitud m√°xima", f"{df_filtrado['Magnitud'].max():.1f}")
            
            if verificar_columna(df_filtrado, 'Profundidad'):
                with col4:
                    st.metric("Profundidad promedio", f"{df_filtrado['Profundidad'].mean():.0f} km")
            
            # Gr√°ficos solo si hay datos
            if verificar_columna(df_filtrado, 'Magnitud'):
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("### üìä Distribuci√≥n por Magnitud")
                    fig1 = px.histogram(df_filtrado, x='Magnitud', nbins=20,
                                      title="Distribuci√≥n de Magnitudes")
                    st.plotly_chart(fig1, use_container_width=True)
                
                with col2:
                    if verificar_columna(df_filtrado, 'Profundidad'):
                        st.markdown("### üï≥Ô∏è Magnitud vs Profundidad")
                        fig2 = px.scatter(df_filtrado, x='Profundidad', y='Magnitud',
                                        title="Relaci√≥n Magnitud-Profundidad")
                        st.plotly_chart(fig2, use_container_width=True)
                    else:
                        st.info("Datos de profundidad no disponibles para el gr√°fico")
            
            # Timeline de sismos
            if verificar_columna(df_filtrado, 'Fecha') and verificar_columna(df_filtrado, 'Magnitud'):
                st.markdown("### ‚è∞ Timeline de Sismos")
                df_timeline = df_filtrado.sort_values('Fecha')
                fig3 = px.line(df_timeline, x='Fecha', y='Magnitud',
                             title="Evoluci√≥n temporal de magnitudes")
                st.plotly_chart(fig3, use_container_width=True)
            
            # Tabla de datos
            with st.expander("üîç Ver datos detallados"):
                st.dataframe(df_filtrado)
        
        else:
            st.error("‚ùå No se pudieron obtener datos s√≠smicos")

elif seccion == "üìà An√°lisis Comparativo":
    st.markdown("## üìà An√°lisis Comparativo de Indicadores")
    
    st.markdown("### Compara m√∫ltiples indicadores econ√≥micos")
    
    # Selecci√≥n de indicadores para comparar
    col1, col2 = st.columns(2)
    
    with col1:
        indicadores_disponibles = ['uf', 'dolar', 'euro', 'ipc']
        indicador1 = st.selectbox("Primer indicador:", indicadores_disponibles, key="ind1")
    
    with col2:
        indicador2 = st.selectbox("Segundo indicador:", 
                                [x for x in indicadores_disponibles if x != indicador1], 
                                key="ind2")
    
    a√±o_comparacion = st.selectbox("A√±o para comparaci√≥n:", ["2024", "2023"], key="a√±o_comp")
    
    if st.button("üîÑ Comparar Indicadores", type="primary"):
        with st.spinner("Obteniendo datos para comparaci√≥n..."):
            # Obtener datos de ambos indicadores
            df1, nombre1 = obtener_indicadores_economicos(indicador1, a√±o_comparacion)
            df2, nombre2 = obtener_indicadores_economicos(indicador2, a√±o_comparacion)
            
            if df1 is not None and df2 is not None and not df1.empty and not df2.empty:
                # Crear gr√°fico de comparaci√≥n dual
                fig = make_subplots(specs=[[{"secondary_y": True}]])
                
                fig.add_trace(
                    go.Scatter(x=df1['fecha'], y=df1['valor'], name=nombre1 or indicador1),
                    secondary_y=False,
                )
                
                fig.add_trace(
                    go.Scatter(x=df2['fecha'], y=df2['valor'], name=nombre2 or indicador2),
                    secondary_y=True,
                )
                
                fig.update_xaxes(title_text="Fecha")
                fig.update_yaxes(title_text=nombre1 or indicador1, secondary_y=False)
                fig.update_yaxes(title_text=nombre2 or indicador2, secondary_y=True)
                
                fig.update_layout(title_text=f"Comparaci√≥n: {nombre1 or indicador1} vs {nombre2 or indicador2}")
                
                st.plotly_chart(fig, use_container_width=True)
                
                # An√°lisis estad√≠stico
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown(f"### üìä Estad√≠sticas {nombre1 or indicador1}")
                    stats1 = df1['valor'].describe()
                    st.dataframe(stats1)
                
                with col2:
                    st.markdown(f"### üìä Estad√≠sticas {nombre2 or indicador2}")
                    stats2 = df2['valor'].describe()
                    st.dataframe(stats2)
                
            else:
                st.error("‚ùå No se pudieron obtener datos para la comparaci√≥n")

elif seccion == "üìä Dashboard Interactivo":
    st.markdown("## üìä Dashboard Interactivo")
    
    # Obtener m√∫ltiples datos
    with st.spinner("Cargando dashboard..."):
        df_uf, _ = obtener_indicadores_economicos('uf', '2024')
        df_dolar, _ = obtener_indicadores_economicos('dolar', '2024')
        df_sismos = obtener_sismos()
        
        # Layout del dashboard
        col1, col2, col3 = st.columns(3)
        
        # Columna UF
        with col1:
            st.markdown("### üí∞ UF")
            if df_uf is not None and not df_uf.empty:
                uf_actual = df_uf['valor'].iloc[-1]
                uf_anterior = df_uf['valor'].iloc[-2] if len(df_uf) > 1 else uf_actual
                delta_uf = uf_actual - uf_anterior
                st.metric("Valor UF", f"${uf_actual:,.0f}", f"{delta_uf:+.0f}")
                
                # Gr√°fico peque√±o UF
                fig_uf = px.line(df_uf.tail(30), x='fecha', y='valor', title="UF - √öltimos 30 d√≠as")
                fig_uf.update_layout(height=300, showlegend=False)
                st.plotly_chart(fig_uf, use_container_width=True)
            else:
                st.info("Datos de UF no disponibles")
        
        # Columna D√≥lar
        with col2:
            st.markdown("### üíµ D√≥lar")
            if df_dolar is not None and not df_dolar.empty:
                dolar_actual = df_dolar['valor'].iloc[-1]
                dolar_anterior = df_dolar['valor'].iloc[-2] if len(df_dolar) > 1 else dolar_actual
                delta_dolar = dolar_actual - dolar_anterior
                st.metric("Valor D√≥lar", f"${dolar_actual:,.0f}", f"{delta_dolar:+.0f}")
                
                # Gr√°fico peque√±o D√≥lar
                fig_dolar = px.line(df_dolar.tail(30), x='fecha', y='valor', title="D√≥lar - √öltimos 30 d√≠as")
                fig_dolar.update_layout(height=300, showlegend=False)
                st.plotly_chart(fig_dolar, use_container_width=True)
            else:
                st.info("Datos de D√≥lar no disponibles")
        
        # Columna Sismos
        with col3:
            st.markdown("### üåç Sismos")
            if not df_sismos.empty:
                sismos_recientes = len(df_sismos.tail(7))  # √öltimos 7 registros
                st.metric("Sismos recientes", sismos_recientes)
                
                if verificar_columna(df_sismos, 'Magnitud'):
                    mag_promedio = df_sismos['Magnitud'].tail(10).mean()
                    st.metric("Mag. promedio", f"{mag_promedio:.1f}")
                    
                    # Gr√°fico sismos
                    fig_sismos = px.histogram(df_sismos.tail(50), x='Magnitud', 
                                            title="Distribuci√≥n Magnitudes")
                    fig_sismos.update_layout(height=300, showlegend=False)
                    st.plotly_chart(fig_sismos, use_container_width=True)
                else:
                    st.info("Datos de magnitud no disponibles")
            else:
                st.info("Datos s√≠smicos no disponibles")
        
        # Secci√≥n de resumen
        st.markdown("---")
        st.markdown("### üìã Resumen del Proyecto")
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("""
            **üîß Tecnolog√≠as Utilizadas:**
            - Python 3.x
            - Streamlit para la interfaz web
            - Requests para consumo de APIs
            - Pandas para an√°lisis de datos
            - Plotly para visualizaciones interactivas
            - APIs REST p√∫blicas de Chile
            """)
        
        with col2:
            st.markdown("""
            **üìä Funcionalidades Implementadas:**
            - Conexi√≥n a m√∫ltiples APIs REST
            - An√°lisis estad√≠stico de datos
            - Visualizaciones interactivas
            - Dashboard en tiempo real
            - Comparaci√≥n de indicadores
            - Filtros din√°micos
            """)

# Footer
st.markdown("---")
st.markdown("""
<div style="text-align: center; color: #666;">
    <p>üéì Proyecto Final - DataViz Python | Universidad San Sebasti√°n</p>
    <p>Desarrollado por Claudio Navarrete Jara usando Streamlit y APIs p√∫blicas de Chile</p>
</div>
""", unsafe_allow_html=True)